package com.balu.gl.cutomer.relationship.management.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.balu.gl.cutomer.relationship.management.entity.Customer;
import com.balu.gl.cutomer.relationship.management.service.CustomerService;

@Controller
@RequestMapping("/customer")
public class CustomerRelationshipController {

	@Autowired
	private CustomerService customerService;

	@RequestMapping("/showFormForAdd")
	public String showFormForAdd(Model model) {

		Customer customer = new Customer();

		model.addAttribute("customer", customer);

		return "customer-form";
	}

	@RequestMapping("/showFormForUpdate")
	public String showFormForUpdate(@RequestParam("customerId") int customerId, Model model) {

		// get the Book from the service
		Optional<Customer> customer = customerService.findById(customerId);

		if (customer.isPresent()) {
			model.addAttribute("customer", customer.get());
		} else {
			System.out.println("No customer record exists");
		}

		// send over to our form
		return "customer-form";
	}

	@RequestMapping("/listCustomers")
	public String listAllCustomers(Model model) {
		List<Customer> customers = customerService.getAllCustomers();
		model.addAttribute("customers", customers);
		return "list-customers";
	}

	@PostMapping("/saveCustomer")
	public String addCustomer(@RequestParam(required = false, value = "customerId") Integer customerId,
			@RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName,
			@RequestParam("email") String email) {

		customerService.addOrUpdateCustomer(customerId, firstName, lastName, email);
		return "redirect:/customer/listCustomers";
	}

	@PutMapping("/updateCustomer")
	public Customer updateCustomer(@RequestParam("customerId") int customerId,
			@RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName,
			@RequestParam("email") String email) {

		return customerService.addOrUpdateCustomer(customerId, firstName, lastName, email);

	}

	@RequestMapping("/deleteCustomer")
	public String deleteCustomer(int customerId) {
		customerService.deleteCustomer(customerId);
		return "redirect:/customer/listCustomers";
	}

	@RequestMapping("/search")
	public String search(@RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName,
			Model theModel) {

		// check names, if both are empty then just give list of all Books

		if (firstName.trim().isEmpty() && lastName.trim().isEmpty()) {
			return "redirect:/customer/list";
		} else {
			// else, search by first name and last name
			List<Customer> customers = customerService.searchBy(firstName, lastName);

			// add to the spring model
			theModel.addAttribute("customers", customers);

			// send to list-Books
			return "list-Books";
		}

	}
}
